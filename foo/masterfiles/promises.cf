#   promises.cf - Basic Policy for Community

#EDITING: In the sections below:
#1. ROLES EDIT: Define the roles and classes
#2. SERVERS EDIT: Define server addresses and groups
#3. INPUTS EDIT: Define additional input files
#4. SEQUENCE EDIT: Define which classes will execute which bundles

bundle common def
{
##CLASSES##
 classes:
     "sorry_server" or => { "sorryfoo" };
     "web" or => { "webfoo00", "webfoo01" };
     "mysql" or => { "dbfoo00", "webfootest00" };
     "ldap" or => { "dbfoo00", "webfootest00" };
     "testenv" or => { "webfootest00", "webfootest01" };
     "prodenv" or => { "webfoo00", "webfoo01" };


##VARS##
 vars:
 web::
  testenv::
    "tomcat_password" string => "REDACTED";
    "tomcat_java_opts" string => "JAVA_OPTS='-Xms512m -Xmx1024m -XX:NewSize=256m -XX:MaxNewSize=256m -XX:PermSize=256m -XX:MaxPermSize=256m'";
  prodenv::
    "tomcat_password" string => "REDACTED";
    "tomcat_java_opts" string => "JAVA_OPTS='-Xms1536m -Xmx2048m -XX:NewSize=256m -XX:MaxNewSize=256m -XX:PermSize=256m -XX:MaxPermSize=256m'";

## Servers ##
 vars:
  "servers_all" slist => {
	"sorryfoo", 
	"webfoo00",
	"webfoo01",
	"dbfoo00",
	"webfootest00",
	"webfootest01",
  	};

  "servers_sorryfoo" string => "172.16.0.20";
  "servers_webfoo00" string => "172.16.0.21";
  "servers_webfoo01" string => "172.16.0.22";
  "servers_dbfoo00" string => "172.16.0.23";
  "servers_webfootest00" string => "172.16.1.21";
  "servers_webfootest01" string => "172.16.1.22";

  ## ACL Groups##
  "acl" slist => { 
                   "$(sys.policy_hub)/32" #just myself by default
                   },
       comment => "Define an acl for the machines to be granted accesses",
        handle => "common_def_vars_acl"; 

  "domain"  string => "REDACTED.corp",
              comment => "Define a global domain for all hosts",
               handle => "common_def_vars_domain";
  "dir_masterfiles" string => translatepath("$(sys.workdir)/masterfiles"),
                   comment => "Define masterfiles path",
                    handle => "common_def_vars_dir_masterfiles";
}

body common control
{
 bundlesequence => { "main" };
 inputs => { "cfengine_stdlib.cf", "vmware_tools.cf", "authzn.cf",
	     "yum_repos.cf", "glpi.cf", "zabbix.cf", "packages.cf", 
	     "services.cf", "mcafee.cf", "mcafee_excludes.cf", "tomcat.cf",
             "apachephp.cf", "apache_sorry.cf", "memcached.cf", "nfs_logs.cf",
             "mysql.cf", "openldap.cf", "smb_mounts.cf", "cleanup.cf" };

 version => "Community Promises.cf 1.0.0";
}

bundle agent main
{
 files:
        "/var/cfengine/."
        perms => m(770);

  methods:
	any::
		"any" usebundle => first;
		"any" usebundle => yum_repos;
		"any" usebundle => vmware_tools;
		"any" usebundle => authzn;
		"any" usebundle => glpi;
		"any" usebundle => zabbix;
		"any" usebundle => packages;
		"any" usebundle => services;
                "any" usebundle => cleanup;
	web::
		"web" usebundle => tomcat;
		"web" usebundle => apachephp;
		"web" usebundle => memcached;
		"web" usebundle => mcafee;
		"web" usebundle => mcafee_excludes;
		"web" usebundle => nfs_logs;
		"web" usebundle => smb_mounts;
	mysql::
		"mysql" usebundle => mysql;
	ldap::
		"ldap" usebundle => openldap;
	sorry_server::
		"sorry_server" usebundle => apache_sorry;
		"sorry_server" usebundle => nfs_logs;
}


bundle server access_rules()
{
 access:
	any::
	"$(def.dir_masterfiles)"
	  admit => { @(def.acl) };
	#Per-Role 'Recipe' access
	"/var/cfengine/recipes/mysql"
          admit => { @(def.acl) };
	"/var/cfengine/recipes/tomcat"
	  admit => { @(def.acl) };

 roles:
 #allow root to define classes via cf-runagent
".*"  authorize => { "root" };
}


###########################################
###########################################
###########################################
#You Shouldn't Have to Edit Below This Line
###########################################
###########################################
###########################################


# This part is for cf-agent 
# Settings describing the details of the fixed behavioural promises
body agent control
{
 any::
 # Global default for minutes that must elapse before promise will be rechecked.
  ifelapsed => "5";
 # Do not send IP/name during server connection if address resolution is broken.
  skipidentify => "true";
}

# This part is for cf-serverd
# Server controls are mainly about determining access policy for the connection 
# Access to specific files must be granted in addition. 
# You may want to 'service cfengine3 restart' on the master after ACL updates
body server control 
{
 denybadclocks         => "false";
 allowconnects         => { "127.0.0.1" , "::1", @(def.acl) };
 allowallconnects      => { "127.0.0.1" , "::1", @(def.acl) };
 trustkeysfrom         => { "127.0.0.1" , "::1", @(def.acl) };
 skipverify            => { ".*$(def.domain)", "127.0.0.1" , "::1", @(def.acl) };
 allowusers            => { "root" };
 cfruncommand          => "$(sys.cf_agent)"; #allow cf-runagent
}

# This part is for cf-execd
# These body settings determine the behaviour of cf-execd, including scheduling
# times and output capture to $(sys.workdir)/outputs and relay via email.
body executor control
{
 any::
  splaytime  => "1";
  mailto     => "root@localhost";
  mailfrom   => "cfengine@localhost";
  smtpserver => "localhost";
  mailmaxlines => "0";
  # Default:
  # schedule => { "Min00", "Min05", "Min10", "Min15", "Min20", "Min25", 
  #               "Min30", "Min35", "Min40", "Min45", "Min50", "Min55" };

  # The full path and command to the executable run by default (overriding builtin).
  linux::
   exec_command => "$(sys.cf_twin) -f failsafe.cf && $(sys.cf_agent)";
}

# This part is for cf-report
# Determines a list of reports to write into the build directory. 
body reporter control
{
 any::
  reports => { 
             "all" 
             };
  build_directory => "$(sys.workdir)/reports";
  report_output   => "html";
  style_sheet => "/cf_enterprise.css";
}

# This part is for cf-runagent
# The most important parameter here is the list of hosts to poll
body runagent control
{
# A list of hosts to contact when using cf-runagent
 any::
  hosts =>  { @(def.servers_all) };
}

# This part is for cf-monitord
# The system defaults will be sufficient for most users. 
body monitor control
{
 any::
  forgetrate => "0.7";
  histograms => "true";
}

# Some initial reports and commands
bundle agent first
{
 vars:
  "redhat_release" string => execresult("/bin/cat /etc/redhat-release", "noshell");

 files:
  linux::
	"/etc/motd" 
		edit_defaults => empty,
		edit_line => insert_lines("This system is managed by CFEngine. Manual modifications may be overwritten.");

 reports:
  cfengine_3::
   "--> CFE is running on $(sys.fqhost)"
      comment => "Display message on screen/email",
       handle => "first_reports_cfe_running";
  linux::
   "--> Release: $(first.redhat_release)"
      comment => "Display redhat release version",
      handle => "first_reports_redhat_release";

  commands:
      	run_cfagent_failsafe::
                "/var/cfengine/bin/cf-agent -K -f /var/cfengine/masterfiles/failsafe.cf";
}
